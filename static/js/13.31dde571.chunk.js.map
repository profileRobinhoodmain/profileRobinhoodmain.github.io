{"version":3,"sources":["views/Farms/components/Divider.tsx","config/index.ts","components/layout/Flex.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["styled","div","theme","colors","textSubtle","BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","Wrapper","primary","ExpandableSectionButton","onClick","expanded","token","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","TranslateString","useI18n","liquidityUrlPathParts","justifyContent","href","fontSize","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","isToken","depositFee","alignItems","mb","console","log","src","alt","width","height","flexDirection","style","variant","useStake","pid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","info","useUnstake","onUnstake","unstake","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","times","toString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","isRBH","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","getColor","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","lpContract","approve","tx","useApprove","getContract","handleApprove","error","textTransform","pr","mt","backgroundColor","fullWidth","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","toFixed","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","display","CardActionsContainer","border","marginTop","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","rbhPerBlock","poolWeight","pow","comparedTo","Page","textAlign","exact"],"mappings":"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","file":"static/js/13.31dde571.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(1)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const CAKE_POOL_PID = 1\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n  token?:string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded, token }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color={token === \"RBH\"? \"card\" : \"primary\"} bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n  token?:string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  token\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text  color={token === \"RBH\" ? \"white\" :\"textSubtle\"} >{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal\r\n           \r\n          href={\r\n            isTokenOnly\r\n              ? `https://exchange.robinhoodswap.finance/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              : `https://exchange.robinhoodswap.finance/#/add/${liquidityUrlPathParts}`\r\n          }\r\n        >\r\n          <Text fontSize=\"12px\"  color={token === \"RBH\" ? \"white\" :\"textSubtle\"} >{lpLabel}</Text>\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text color={token === \"RBH\" ? \"card\" :\"textSubtle\"} >{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text color={token === \"RBH\" ? \"card\" :\"textSubtle\"}>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link color={token === \"RBH\" ? \"card\" :\"textSubtle\"} external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n  isToken?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n  color:white;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n  isToken,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      {console.log(farmImage)}\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={100} height={isToken ? 90 : 60} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\" style={{color:`${tokenSymbol === 'RBH' ? \"#eef8ef\" :\"\"}`}}>\r\n          {lpLabel}\r\n        </Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {/* {depositFee === 0 ? <NoFeeTag /> : null} */}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\" >{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {depositFeeBP > 0 ? (\r\n        <StyledMaxText>\r\n          {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP / 10000).toString()}{' '}\r\n          {symbol}\r\n        </StyledMaxText>\r\n      ) : null}\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', depositFeeBP = 0 }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"primary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"primary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n  isRBH:boolean\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP ,isRBH}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  const getColor = ()=>{\r\n    return isRBH ?\"#fff\":\"rgb(192, 192, 192)\"\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' :getColor()}>\r\n        \r\n        <div style={{color:getColor()}}>{displayBalance}</div>\r\n      \r\n      </Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  token?:string\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid,token }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  const getColor=()=>{\r\n    return token === \"RBH\"?\"white\":\"text\";\r\n  }\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' :getColor()}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 12 ? (\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size=\"sm\"\r\n            variant=\"secondary\"\r\n            marginBottom=\"15px\"\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n        ) : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n  token?:string\r\n  isRBH?:boolean\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account,token ,isRBH}) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    if (isTokenOnly) {\r\n      return getContract(ethereum as provider, tokenAddress)\r\n    }\r\n    return getContract(ethereum as provider, lpAddress)\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        isRBH={isRBH}\r\n        depositFeeBP={depositFeeBP}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" style={{backgroundColor:`${token === \"RBH\" ? \"white\" :\"\"}`}} fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        <Text  color={token === \"RBH\" ? \"textSubtle\" :\"card\"}>{TranslateString(999, 'Approve Contract')}</Text>\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\"  color={token === \"RBH\" ? \"card\" :\"textSubtle\"} fontSize=\"20px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          RBH\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color={token === \"RBH\" ? \"card\" :\"textSubtle\"}  fontSize=\"20px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid}  token={token}/>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\"    color={token === \"RBH\" ? \"card\" :\"textSubtle\"}  fontSize=\"16px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\"   color={token === \"RBH\" ? \"white\" :\"textSubtle\"}  fontSize=\"16px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton token={token}  mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            RBH Per $1000\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"20px\">{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"20px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://exchange.robinhoodswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(79, 220, 74, 1) 0%,\r\n    rgba(79, 220, 74, 1) 10%,\r\n    rgba(79, 220, 74, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(79, 220, 74, 1) 40%,\r\n    rgba(79, 220, 74, 1) 50%,\r\n    rgba(79, 220, 74, 1) 60%,\r\n    rgba(79, 220, 74, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  // background:#000000c4;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 30px;\r\n  // box-shadow: 0 0 12px 2px ;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.lpSymbol.toLowerCase()}`\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'RBH'\r\n  const farmAPY =\r\n    farm.apy &&\r\n    farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2,\r\n    })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n\r\n  return (\r\n    <FCard style={{backgroundColor:`${farm.tokenSymbol === 'RBH' ? \"#33932e\" :\"\"}`}}>\r\n      {farm.tokenSymbol === 'RBH' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        isToken={farm.isTokenOnly}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text style={{ fontSize: '20px',color:`${farm.tokenSymbol === 'RBH' ? \"#FFFFFF\" :\"\"}` }}>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center', fontSize: '20px',color:`${farm.tokenSymbol === 'RBH' ? \"#FFFFFF\" :\"\"}` }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text style={{color:`${farm.tokenSymbol === 'RBH' ? \"#FFFFFF\" :\"\"}`}}>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text style={{color:`${farm.tokenSymbol === 'RBH' ? \"#FFFFFF\" :\"\"}`}}  bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text style={{color:`${farm.tokenSymbol === 'RBH' ? \"#FFFFFF\" :\"\"}`}}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text style={{color:`${farm.tokenSymbol === 'RBH' ? \"#FFFFFF\" :\"\"}`}} bold>{farm.depositFeeBP / 100}%</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} token={farm.tokenSymbol} isRBH={farm.tokenSymbol === 'RBH'} />\r\n      <Divider style={{color:\"#9cd56c\", border:\"0px solid #9cd56c\", backgroundColor:\"#9cd56c\", marginTop:\"10px\", marginBottom:\"10px\"}} />\r\n\r\n      \r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n        token={farm.tokenSymbol}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly\r\n              ? `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              : `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n          token={farm.tokenSymbol}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n        <Text> {TranslateString(699, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(698, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(700, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps {\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { tokenMode } = farmsProps\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.rbhPerBlock || 1)\r\n          .times(new BigNumber(farm.poolWeight))\r\n          .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePrice.times(cakeRewardPerYear)\r\n\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice)\r\n        }\r\n\r\n        if (totalValue.comparedTo(0) > 0) {\r\n          apy = apy.div(totalValue)\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <div>\r\n      <Page>\r\n        <div>\r\n          <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n            {tokenMode\r\n              ? TranslateString(10002, 'Stake tokens to earn ENTER')\r\n              : TranslateString(320, 'Stake LP tokens to earn ENTER')}\r\n          </Heading>\r\n          {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n            {TranslateString(10000, 'Deposit Fee will be used to buyback ENTER')}\r\n          </Heading> */}\r\n          <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\r\n        </div>\r\n        <div>\r\n          <Divider />\r\n          <FlexLayout>\r\n            <Route exact path={`${path}`}>\r\n              {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n            </Route>\r\n            <Route exact path={`${path}/history`}>\r\n              {farmsList(inactiveFarms, true)}\r\n            </Route>\r\n          </FlexLayout>\r\n        </div>\r\n        {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\r\n      </Page>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}
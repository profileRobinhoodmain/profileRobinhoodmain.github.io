{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","hooks/useRefresh.ts","state/actions.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","utils/multicall.ts","config/constants/contracts.ts","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["CHAIN_ID","process","fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","console","log","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","rbhPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","val","BNB","CAKE","plus","nodes","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","fastRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","PoolCategory","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","cake","56","97","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","refferal","getCakeAddress","addresses","chainId","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","getRefferalAddress","pools","nonBnbPools","poolsConfig","filter","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingRA","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","initialOpenState","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","Exchange","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","refAddress","URL","location","searchParams","get","Global","fallback","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.dbacfbed.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      console.log('chain id', CHAIN_ID)\r\n\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      console.log('chain id', CHAIN_ID)\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\r\n        await multicall(erc20, calls)\r\n\r\n      let tokenAmount\r\n      let lpTotalInQuoteToken\r\n      let tokenPriceVsQuote\r\n      if (farmConfig.isTokenOnly) {\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\r\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          tokenPriceVsQuote = new BigNumber(1)\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\r\n      } else {\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(18))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if (tokenAmount.comparedTo(0) > 0) {\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\r\n        } else {\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\r\n        }\r\n      }\r\n\r\n      const [info, totalAllocPoint, rbhPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'rbhPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        rbhPerBlock: new BigNumber(rbhPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingRbh',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 7 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  // const pid = 1 // CAKE-BNB LP\r\n  // const bnbPriceUSD = usePriceBnbBusd()\r\n  // const farm = useFarmFromPid(pid)\r\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  const pid = 3 // EGG-BUSD LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const cakePrice = usePriceCakeBusd()\r\n  let value = new BigNumber(0)\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\r\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\r\n      } else {\r\n        val = farm.lpTotalInQuoteToken\r\n      }\r\n      value = value.plus(val)\r\n    }\r\n  }\r\n  return value\r\n}\r\n","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  launchDate: string\r\n  launchTime: string\r\n  saleAmount: string\r\n  raiseAmount: string\r\n  cakeToBurn: string\r\n  projectSiteUrl: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n  releaseBlockNumber: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","export default {\r\n  cake: {\r\n    56: '0xD5779F2F9D7D239228e4e78bC78F50768661A081',\r\n    97: '0x29b284b05dac984a01134eFE26F6cD2b920fdB45',\r\n  },\r\n  masterChef: {\r\n    56: '0xd4DC714a68638ffc5EC24441FE37e9dDa677467a',\r\n    97: '0xa24853c00DE8d35A83fe435770dda16fEEa68EE7',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '0xae13d989dac2f0debff460ac112a837c89baa7cd',\r\n  },\r\n  lottery: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n  },\r\n  refferal: {\r\n    56: '0x4f8012DE3dCF0ba7089cEe58b8e9124DA70D0E81',\r\n    97: '0x08d49215Be16bd8593c046119A5631Ec668AB99b',\r\n  },\r\n}\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.cake[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\nexport const getRefferalAddress = () => {\r\n  return addresses.refferal[chainId]\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 0,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   contractAddress: {\r\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '10',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'TWT',\r\n  //   stakingTokenName: QuoteToken.SYRUP,\r\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n  //   contractAddress: {\r\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://trustwallet.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '20',\r\n  //   sortOrder: 999,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract(masterChefABI as unknown as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingRA('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  \r\n  {\r\n    pid: 0,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'RBH',\r\n    lpAddresses: {\r\n      97: '0x29b284b05dac984a01134eFE26F6cD2b920fdB45',\r\n      56: '0x1F88F4C341365Bf67A96F4F01362EafC35e9dE1e', // AUTO-BNB LP\r\n    },\r\n    tokenSymbol: 'RBH',\r\n    tokenAddresses: {\r\n      97: '0x29b284b05dac984a01134eFE26F6cD2b920fdB45',\r\n      56: '0xD5779F2F9D7D239228e4e78bC78F50768661A081',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n  // {\r\n  //   pid: 1,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'PRV',\r\n  //   lpAddresses: {\r\n  //     97: '0x29b284b05dac984a01134eFE26F6cD2b920fdB45',\r\n  //     56: '0x7762A14082Ab475C06D3868B385E46aE27017231', // AUTO-BNB LP\r\n  //   },\r\n  //   tokenSymbol: 'PRV',\r\n  //   tokenAddresses: {\r\n  //     97: '0x29b284b05dac984a01134eFE26F6cD2b920fdB45',\r\n  //     56: '0x7762A14082Ab475C06D3868B385E46aE27017231',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n\r\n\r\n  {\r\n    pid: 2,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'RBH-BNB',\r\n    lpAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0x5b9f811D38fc6C1017E0774C552235b33F564DEb', // AUTO-BNB LP\r\n    },\r\n    tokenSymbol: 'RBH',\r\n    tokenAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0xD5779F2F9D7D239228e4e78bC78F50768661A081',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n\r\n\r\n  \r\n\r\n  {\r\n    pid: 3,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'RBH-BUSD',\r\n    lpAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0x1F88F4C341365Bf67A96F4F01362EafC35e9dE1e', // AUTO-BNB LP\r\n    },\r\n    tokenSymbol: 'RBH',\r\n    tokenAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0xD5779F2F9D7D239228e4e78bC78F50768661A081',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n  {\r\n    pid: 7,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'BNB-BUSD',\r\n    lpAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', // AUTO-BNB LP\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n\r\n\r\n  {\r\n    pid: 5,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'CAKE-BNB',\r\n    lpAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0x0eD7e52944161450477ee417DE9Cd3a859b14fD0', // AUTO-BNB LP\r\n    },\r\n    tokenSymbol: 'CAKE',\r\n    tokenAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n \r\n  {\r\n    pid: 8,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'USDC-BUSD',\r\n    lpAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0x2354ef4DF11afacb85a5C7f98B624072ECcddbB1', // AUTO-BNB LP\r\n    },\r\n    tokenSymbol: 'USDC',\r\n    tokenAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n\r\n\r\n  {\r\n    pid: 6,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'PRV-BUSD',\r\n    lpAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0xea275c14414de38f5c19c1e3559af032cc1facf4', // AUTO-BNB LP\r\n    },\r\n    tokenSymbol: 'BUSD',\r\n    tokenAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0x7762A14082Ab475C06D3868B385E46aE27017231',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  \r\n    \r\n \r\n\r\n  {\r\n    pid: 4,\r\n    risk: 5,\r\n    isTokenOnly: false,\r\n    lpSymbol: 'PRV-BNB',\r\n    lpAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0xCd18e1151a4831e5EbCEcC611369123012674253', // AUTO-BNB LP\r\n    },\r\n    tokenSymbol: 'PRV',\r\n    tokenAddresses: {\r\n      97: '0x1de7921C03AC76894e8c930654A12c60d4979217',\r\n      56: '0x7762A14082Ab475C06D3868B385E46aE27017231',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n\r\n  \r\n]\r\n\r\nexport default farms\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  ZHCN,\r\n  ZHTW,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then((r) => r.json())\r\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          console.error('ERROR')\r\n          console.error(e)\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'DASHBOARD',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'TRADE',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'https://exchange.robinhoodswap.finance/#/swap',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'https://exchange.robinhoodswap.finance/#/add/ETH/0xa9264b9023D28A78fCF54fAc3CEc827CBbB6ceC0',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'FARMS',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'POOLS',\r\n    icon: 'PoolIcon',\r\n    href: '/pools',\r\n  },\r\n\r\n  {\r\n    label: 'CHARTS',\r\n    icon: 'InfoIcon',\r\n    initialOpenState: false,\r\n    items: [\r\n      {\r\n        label: 'Dex Guru',\r\n        href: 'https://dex.guru/token/0xD5779F2F9D7D239228e4e78bC78F50768661A081-bsc',\r\n      },\r\n      {\r\n        label: 'Poo Coin',\r\n        href: 'https://poocoin.app/tokens/0xD5779F2F9D7D239228e4e78bC78F50768661A081',\r\n      },\r\n      {\r\n        label: 'Bogged Finance',\r\n        href: 'https://charts.bogged.finance/?token=0xD5779F2F9D7D239228e4e78bC78F50768661A081',\r\n      },\r\n      {\r\n        label: 'Dex Tools',\r\n        href: 'https://www.dextools.io/app/pancakeswap/pair-explorer/0x5b9f811D38fc6C1017E0774C552235b33F564DEb',\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    label: 'MORE',\r\n    icon: 'MoreIcon',\r\n    items: [\r\n      // {\r\n      //   label: 'Github',\r\n      //   href: '',\r\n      // },\r\n      {\r\n        label: 'GitBook',\r\n        href: 'https://robinhoodswapfinance.gitbook.io/',\r\n      },\r\n      {\r\n        label: 'Feedback',\r\n        href: 'https://docs.google.com/forms/d/e/1FAIpQLSfW9jaHzkhT-S-wc_VYHzD9K-EVy4-ud8_8O882fVdSmPx-Nw/viewform'\r\n    },\r\n      // {\r\n      //   label: 'Blog',\r\n      //   href: '',\r\n      // },\r\n    ],\r\n  },\r\n\r\n  // {\r\n  //   label: 'Pools',\r\n  //   icon: 'PoolIcon',\r\n  //   href: '/pools',\r\n  // },\r\n  // {\r\n  //   label: 'Lottery',\r\n  //   icon: 'TicketIcon',\r\n  //   href: '/lottery',\r\n  // },\r\n  // {\r\n  //   label: 'NFT',\r\n  //   icon: 'NftIcon',\r\n  //   href: '/nft',\r\n  // },\r\n  // {\r\n  //   label: 'INFO',\r\n  //   icon: 'InfoIcon',\r\n  //   items: [\r\n  //     {\r\n  //       label: 'PancakeSwap',\r\n  //       href: '',\r\n  //     },\r\n  // {\r\n  //   label: 'CoinGecko',\r\n  //   href: '',\r\n  // },\r\n  // {\r\n  //   label: 'CoinMarketCap',\r\n  //   href: '',\r\n  // },\r\n  // {\r\n  //   label: 'AstroTools',\r\n  //   href: '',\r\n  //     // },\r\n  //   ],\r\n  // },\r\n\r\n  {\r\n    label: 'HOW TO',\r\n    icon: 'MoreIcon',\r\n    items: [\r\n      {\r\n        label: 'GET RBH',\r\n        href: 'https://robinhoodswap.gitbook.io/robinhoodswap/how-to-guides/getting-rbh',\r\n      },\r\n      {\r\n        label: 'Add Liquidity',\r\n        href: 'https://robinhoodswap.gitbook.io/robinhoodswap/how-to-guides/getting-lps',\r\n      },\r\n      {\r\n        label: 'How to Farm ',\r\n        href: 'https://robinhoodswap.gitbook.io/robinhoodswap/how-to-guides/how-to-farm',\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    label: 'AUDIT',\r\n    icon: 'AUDIT',\r\n    href: 'https://robinhoodswap.gitbook.io/robinhoodswap/pillars/audit'\r\n    \r\n  },\r\n\r\n  \r\n  // {\r\n  //   label: 'Partnerships/IFO',\r\n  //   icon: 'GooseIcon',\r\n  //   href: 'https://docs.google.com/forms/d/e/1FAIpQLSe7ycrw8Dq4C5Vjc9WNlRtTxEhFDB1Ny6jlAByZ2Y6qBo7SKg/viewform?usp=sf_link',\r\n  // },\r\n  // {\r\n  //   label: 'Audit by Hacken',\r\n  //   icon: 'AuditIcon',\r\n  //   href: 'https://www.goosedefi.com/files/hackenAudit.pdf',\r\n  // },\r\n  // {\r\n  //   label: 'Audit by CertiK',\r\n  //   icon: 'AuditIcon',\r\n  //   href: 'https://certik.org/projects/goose-finance',\r\n  // },\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      cakePriceUsd={cakePriceUsd.toNumber()}\r\n      links={config}\r\n      priceLink=\"#\"\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst Exchange = lazy(() => import('./views/Exchange'))\r\n// const Lottery = lazy(() => import('./views/Lottery'))\r\n// const Pools = lazy(() => import('./views/Pools'))\r\n// const Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n\r\n    const url = new URL(window.location.href)\r\n    const refAddress = url.searchParams.get('ref')\r\n    console.log(refAddress, 'ref address')\r\n    localStorage.setItem('ref', refAddress)\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/pools\">\r\n              <Farms tokenMode />\r\n            </Route>\r\n            <Route path=\"/exchange\">\r\n              <Exchange />\r\n            </Route>\r\n            {/* <Route path=\"/pools\"> */}\r\n            {/*  <Pools /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/lottery\"> */}\r\n            {/*  <Lottery /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/ifo\"> */}\r\n            {/*  <Ifos /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      {/* <NftGlobalNotification /> */}\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract(abi as unknown as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n"],"sourceRoot":""}
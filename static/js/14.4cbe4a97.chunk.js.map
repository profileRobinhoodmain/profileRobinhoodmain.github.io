{"version":3,"sources":["hooks/useRefferal.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CardValue2.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/Refferals.tsx","views/Home/components/RefferalLink.tsx","views/Home/Home.tsx"],"names":["useRefferal","account","useWallet","fastRefresh","useRefresh","useState","refferdBy","totalRfferal","totalReferralCommissions","result","setResults","useEffect","a","calls","address","getRefferalAddress","name","params","multicall","refferalAbi","rawResults","console","log","data","BigNumber","_hex","toNumber","fetchBalances","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","farmsConfig","map","farm","getMasterChefAddress","pid","masterChefABI","results","index","balance","CardValue","value","decimals","prefix","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","style","color","backgroundRepeat","lineHeight","fontWeight","CakeHarvestBalance","earningsSum","TranslateString","useI18n","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","theme","mediaQueries","lg","Block","div","Label","img","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","mb","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","CardValue2","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","rbhPerBlock","StyledTotalValueLockedCard","GG","Toptexts","Moneytexts","Bottomtexts","TotalValueLockedCard","totalValue","useTotalValue","alt","width","height","src","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","RefferalCard","size","RefferalLink","text","window","location","href","onCopy","slice","BG","Donate","Banner","TEXT","h3","TEXT2","Banner00","Foot","Cards","BaseLayout","sm","Home","Page","FarmStakingCard"],"mappings":"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","file":"static/js/14.4cbe4a97.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getRefferalAddress } from 'utils/addressHelpers'\r\nimport refferalAbi from 'config/abi/refferal.json'\r\n\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useRefferal = () => {\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const [result, setResults] = useState({ refferdBy: '', totalRfferal: 0, totalReferralCommissions: 0 })\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = [\r\n        {\r\n          address: getRefferalAddress(),\r\n          name: 'getReferrer',\r\n          params: [account],\r\n        },\r\n        {\r\n          address: getRefferalAddress(),\r\n          name: 'referralsCount',\r\n          params: [account],\r\n        },\r\n        {\r\n          address: getRefferalAddress(),\r\n          name: 'totalReferralCommissions',\r\n          params: [account],\r\n        },\r\n      ]\r\n\r\n      const rawResults = await multicall(refferalAbi, calls)\r\n      console.log(rawResults, 'rawresults')\r\n      const data = result\r\n      if (rawResults[0][0] === '0x0000000000000000000000000000000000000000') {\r\n        data.refferdBy = '-'\r\n      } else {\r\n        data.refferdBy = rawResults[0][0]\r\n      }\r\n\r\n      data.totalRfferal = new BigNumber(rawResults[1][0]._hex).toNumber()\r\n      data.totalReferralCommissions = new BigNumber(rawResults[2][0]._hex).toNumber()/1e18\r\n      //  {\r\n      //     refferdBy: rawResults[0][0],\r\n      //     totalRfferal: new BigNumber(rawResults[1][0]._hex),\r\n      //     totalReferralCommissions: new BigNumber(rawResults[2][0]._hex)\r\n      // }\r\n      setResults(data)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh, result])\r\n\r\n  return result\r\n}\r\n\r\nexport default useRefferal\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingRbh',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <div>\r\n      <Text bold fontSize=\"25px\" style={{ color: '#FABE41', backgroundRepeat: 'no-repeat', lineHeight: '1',fontWeight:700, fontSize:\"25px\" }}>\r\n        {prefix}\r\n        {countUp}\r\n      </Text>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = ({ earningsSum }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return <Text color=\"text\" style={{fontWeight:\"bold\", fontSize:\"24px\"}}>{TranslateString(298, 'Locked')}</Text>\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = ({ cakeBalance }) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return <Text color=\"text\" style={{fontWeight:\"bold\", fontSize:\"24px\"}}>{TranslateString(298, 'Locked')}</Text>\r\n  }\r\n\r\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingRbh',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useRefferal from 'hooks/useRefferal'\r\n\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\nimport { usePriceCakeBusd } from '../../../state/hooks'\r\nimport useTokenBalance from '../../../hooks/useTokenBalance'\r\nimport { getCakeAddress } from '../../../utils/addressHelpers'\r\nimport useAllEarnings from '../../../hooks/useAllEarnings'\r\nimport { getBalanceNumber } from '../../../utils/formatBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/egg/3.png');\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n  min-height: 376px;\r\n  background-size: 170px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/egg/3.png');\r\n  background-repeat: no-repeat;\r\n  background-position: center right;\r\n  min-height: 376px;\r\n  background-size: 220px;\r\n  }\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  padding: 10px;\r\n  font-size: 22px;\r\n  font-weight: bold;\r\n  background-repeat: no-repeat;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const refferals = useRefferal()\r\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\r\n  const eggPrice = usePriceCakeBusd().toNumber()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading  style={{ fontSize: '2em'}} mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        {/* <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} /> */}\r\n        <Block>\r\n          <Label>{TranslateString(544, 'ENTER to Harvest')}</Label>\r\n          <CakeHarvestBalance earningsSum={earningsSum} />\r\n          <Text>~${(eggPrice * earningsSum).toFixed(2)}</Text>\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'ENTER in Wallet')}</Label>\r\n          <CakeWalletBalance cakeBalance={cakeBalance} />\r\n          <Text>~${(eggPrice * cakeBalance).toFixed(2)}</Text>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting EGG')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst CardValue2: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n   \r\n    <Text bold fontSize=\"25px\" color=\"textSubtle\" style={{fontWeight:\"bold\", fontSize:\"35px\"} }>\r\n      {prefix}\r\n      {countUp}\r\n    </Text> \r\n  )\r\n}\r\n\r\nexport default CardValue2\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue2 from './CardValue2'\r\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 20px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const farms = useFarms()\r\n  const eggPrice = usePriceCakeBusd()\r\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0)\r\n  const cakeSupply = getBalanceNumber(circSupply)\r\n  const marketCap = eggPrice.times(circSupply)\r\n\r\n  let rbhPerBlock = 0\r\n  if (farms && farms[0] && farms[0].rbhPerBlock) {\r\n    rbhPerBlock = new BigNumber(farms[0].rbhPerBlock).div(new BigNumber(10).pow(18)).toNumber()\r\n  }\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading style={{ fontSize: '2em' }} mb=\"24px\">\r\n          {TranslateString(534, 'Egg Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"20px\">{TranslateString(10005, 'Market Cap')}</Text>\r\n          <CardValue2 fontSize=\"20px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"20px\">{TranslateString(536, 'Total Minted')}</Text>\r\n          {totalSupply && <CardValue2 fontSize=\"20px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"20px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue2 fontSize=\"20px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"20px\">{TranslateString(10004, 'Circulating Supply')}</Text>\r\n          {cakeSupply && <CardValue2 fontSize=\"20px\" value={cakeSupply} decimals={0} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"20px\">{TranslateString(540, 'New EGG/block')}</Text>\r\n          {/* <Text bold fontSize=\"20px\">\r\n            {rbhPerBlock}\r\n          </Text> */}\r\n          {rbhPerBlock && <CardValue2 fontSize=\"20px\" value={rbhPerBlock} decimals={1} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"20px\">Transfer Tax</Text>\r\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          <CardValue2 fontSize=\"20px\" value={0} decimals={0}/><Text fontSize=\"20px\">%</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\nimport CardValue2 from './CardValue2'\r\n\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  background-size: 100%;\r\n`\r\nconst GG = styled.img`\r\nposition: absolute\t;\r\n  right: -3%;\r\n  top:-9%;\r\n  width:25%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    position: absolute\t;\r\n    width:43%;\r\n    right: -6%;\r\n    top:-7%;\r\n  }\r\n`\r\nconst Toptexts = styled.div`\r\nposition: absolute\t;\r\nmargin-top: 9px;\r\n  right: 18%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: -30px;\r\n    right: 22%;\r\n  }\r\n`\r\nconst Moneytexts = styled.div`\r\nmargin-top: 35px;\r\nmargin-bottom: 40px;\r\nposition: relative\t;\r\n  right: -90px;\r\n  bottom: 10%\r\n  fontsize: 50px;\r\n  \r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: 45px;\r\n  position: relative\t;\r\n  right: -120px;\r\n  bottom: 10%\r\n  }\r\n`\r\nconst Bottomtexts = styled.div`\r\nmargin-top: -25px;\r\nposition: absolute\t;\r\n  right: 11%;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: 10px;\r\n    right: 18%;\r\n  }\r\n`\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalValue = useTotalValue()\r\n  // const tvl = totalValue.toFixed(2);\r\n\r\n  return (\r\n\r\n    \r\n    <StyledTotalValueLockedCard >\r\n      <GG alt=\".\" width=\"300\" height=\"300\" src=\"/images/totalvalue2.png \"/>\r\n      <CardBody>\r\n        <Heading  fontSize=\"24px\"  style={{ fontSize: '24px'}} mb=\"24px\">\r\n         <Toptexts>\r\n\r\n         TOTAL VALUE LOCKED \r\n         </Toptexts>\r\n        </Heading>\r\n        <>\r\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          {/* <Heading size=\"xl\"> */}\r\n          <Moneytexts>\r\n          <CardValue2  fontSize=\"24px\" value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\r\n          </Moneytexts>\r\n          {/* </Heading> */}\r\n          <Bottomtexts  style={{ fontSize: '1.2em' }} color=\"text\">\r\n        \r\n            ACROSS ALL FARMS AND POOLS\r\n    \r\n          </Bottomtexts>\r\n        </>\r\n        \r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n    \r\n   \r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { Timeline } from 'react-twitter-widgets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport { useFarms } from '../../../state/hooks'\r\n\r\nconst StyledTwitterCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TwitterCard = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTwitterCard>\r\n      <CardBody>\r\n        <Heading style={{ fontSize: '2em' }} mb=\"24px\">\r\n          {TranslateString(10003, 'Announcements')}\r\n        </Heading>\r\n        <Timeline\r\n          dataSource={{\r\n            sourceType: 'profile',\r\n            screenName: 'RobinhoodSwap',\r\n          }}\r\n          options={{\r\n            height: '280',\r\n            chrome: 'noheader, nofooter',\r\n            width: '400',\r\n            id: \"profile:RobinhoodSwap\"\r\n          }}\r\n\r\n        />\r\n      </CardBody>\r\n    </StyledTwitterCard>\r\n  )\r\n}\r\n\r\nexport default TwitterCard\r\n","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport useRefferal from 'hooks/useRefferal'\r\nimport CardValue from './CardValue'\r\nimport CardValue2 from './CardValue2'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  background-repeat: no-repeat;\r\n  background-position: 95% center;\r\n  background-size: 120px;\r\n  width: 100%;\r\n  background-image: url('/images/RE.png');\r\n  background-repeat: no-repeat;\r\n  background-position: 80% 85%;\r\n  background-size: 170px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    display: flex;\r\n    flex: 1;\r\n    background-repeat: no-repeat;\r\n    background-position: 95% center;\r\n    background-size: 120px;\r\n    width: 100%;\r\n    background-image: url('/images/RE.png');\r\n    background-repeat: no-repeat;\r\n    background-position: 80% bottom;\r\n    background-size: 200px;\r\n  }\r\n`\r\n\r\nconst RefferalCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  const totalRfferal = useRefferal()\r\n  // const tvl = totalValue.toFixed(2);\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        {console.log(totalRfferal, 'totalValue')}\r\n        <Heading size=\"lg\" style={{ fontSize: '2em' }} mb=\"24px\">\r\n          Referral Details\r\n        </Heading>\r\n        {totalRfferal && (\r\n          <>\r\n            <Text style={{ fontSize: '1.2em' }} color=\"text\">\r\n              Total Referral Earnings\r\n            </Text>\r\n            <CardValue2 fontSize=\"4em\" value={totalRfferal.totalReferralCommissions} />\r\n          </>\r\n        )}\r\n        {totalRfferal && (\r\n          <>\r\n            <Text style={{ fontSize: '1.2em' }} color=\"text\">\r\n              Total Referral\r\n            </Text>\r\n            <CardValue2 fontSize=\"2em\" value={totalRfferal.totalRfferal} decimals={0} />\r\n          </>\r\n        )}\r\n        {totalRfferal && (\r\n          <>\r\n            <Text style={{ fontSize: '1.2em' }} color=\"text\">\r\n              Referred By\r\n            </Text>\r\n\r\n            <Text color=\"textSubtle\">{totalRfferal.refferdBy} </Text>\r\n          </>\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default RefferalCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text, Button } from '@pancakeswap-libs/uikit'\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  background-repeat: no-repeat;\r\n  background-position: 95% center;\r\n  background-size: 120px;\r\n  background-image: url('/images/link.png');\r\n  background-repeat: no-repeat;\r\n  background-position: 95% -10%;\r\n  background-size: 130px;\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    display: flex;\r\n    flex: 1;\r\n    background-repeat: no-repeat;\r\n    background-position: 95% center;\r\n    background-size: 120px;\r\n    background-image: url('/images/link.png');\r\n    background-repeat: no-repeat;\r\n    background-position: 80% 0%;\r\n    background-size: 150px;\r\n  }\r\n  \r\n`\r\n\r\nconst RefferalLink = () => {\r\n  const { account } = useWallet()\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading style={{ fontSize: '2em' }} mb=\"24px\">\r\n          Referral Link\r\n        </Heading>\r\n\r\n        <Text style={{ fontSize: '1.2em' }}>Click on Button to copy your referral link</Text>\r\n        <br />\r\n        <CopyToClipboard text={`${window.location.href}?ref=${account}`} onCopy={() => console.log('Copied')}>\r\n          <Button fullWidth>{`${window.location.href}?ref=${account}`.slice(0, 50)}</Button>\r\n        </CopyToClipboard>\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default RefferalLink\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from './components/FarmStakingCard'\r\nimport LotteryCard from './components/LotteryCard'\r\nimport CakeStats from './components/CakeStats'\r\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\r\nimport TwitterCard from './components/TwitterCard'\r\nimport RefferalCard from './components/Refferals'\r\nimport RefferalLink from './components/RefferalLink'\r\n\r\n\r\n\r\nconst BG = styled.div`\r\n\r\nbackground-image: url('/images/bg.png');\r\nbackground-position: center;\r\nbackground-size: cover;\r\nbackground-repeat: no-repeat;\r\n`\r\nconst Donate = styled.div`\r\nbackground-image: url('/images/donatephone.png');\r\nheight: 530px;\r\nbackground-position: center;\r\nbackground-size: 350px;\r\nbackground-repeat: no-repeat;\r\nmargin-bottom: 5px;\r\n\r\n${({ theme }) => theme.mediaQueries.lg} {\r\n  background-image: url('/images/donate.png');\r\n  height: 374px;\r\n  background-position: center;\r\n  background-size: 100%;\r\n  background-repeat: no-repeat;\r\n}\r\n`\r\n\r\nconst Banner = styled.div`\r\nbackground-image: url('/images/banner.png');\r\nheight: 50px;\r\nbackground-position: center;\r\nbackground-size: 350px;\r\nbackground-repeat: no-repeat;\r\nmargin-bottom: 15px;\r\n${({ theme }) => theme.mediaQueries.lg} {\r\n  background-image: url('/images/banner.png');\r\n  height: 175px;\r\n  background-position: center;\r\n  background-size: 100%;\r\n  background-repeat: no-repeat;\r\n  margin-bottom: -20px;\r\n}\r\n`\r\n\r\n\r\nconst TEXT = styled.h3`\r\nposition:relative;\r\n  top: 130px;\r\n  right: -10px;\r\n  text-align: center;\r\n  font-size: 30px;\r\n  color: brown;\r\n${({ theme }) => theme.mediaQueries.lg} {\r\n  position:relative;\r\n  top: 108px;\r\n  right: -20px;\r\n  text-align: center;\r\n  font-size: 30px;\r\n  color: brown;\r\n\r\n}\r\n`\r\nconst TEXT2 = styled.div`\r\nposition:relative;\r\n  text-align: center;\r\n  font-size: 40px;\r\n  color: brown;\r\n  top :15px;\r\n  padding-bottom: 60px;\r\n${({ theme }) => theme.mediaQueries.lg} {\r\n  position:relative;\r\n  text-align: center;\r\n  font-size: 40px;\r\n  color: brown;\r\n  top: 6px;\r\n  padding-bottom: 20px;\r\n}\r\n`\r\n// const Space = styled.div`\r\n// height:150px;\r\n//\r\n// ${({ theme }) => theme.mediaQueries.lg} {\r\n//   height:300px;\r\n// }\r\n// `\r\nconst Banner00 = styled.img`\r\nposition: sticky;\r\n  left:100%;\r\n  bottom: 2%;\r\n`\r\n\r\nconst Foot = styled.div`\r\nalign-items: center;\r\nbackground-image: url('/images/footer.png');\r\nbackground-repeat: no-repeat;\r\nbackground-position: center;\r\ndisplay: flex;\r\njustify-content: center;\r\nflex-direction: column;\r\nmargin: auto;\r\nwidth: auto;\r\ntext-align: center;\r\nbackground-size: 100%;\r\nbackground:white;\r\n\r\n\r\n\r\n\r\n\r\n${({ theme }) => theme.mediaQueries.lg} {\r\n  background-position: center, right;\r\n  background-image: url('/images/footer.png');\r\n  background-repeat: no-repeat;\r\n  background-size: 70%;\r\n  height: 120px;\r\n  padding-top: 0;\r\n}\r\n`\r\n// const Hero = styled.div`\r\n// position: absolute;\r\n//   align-items: center;\r\n//   background-image: url('/images/logo.png');\r\n//   background-repeat: no-repeat;\r\n//   background-position: 45% ;\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   flex-direction: column;\r\n//   height: 150px;\r\n//   width: 100%;\r\n//   text-align: center;\r\n//   background-size: 150%;\r\n//\r\n//   ${({ theme }) => theme.mediaQueries.lg} {\r\n//\r\n//   align-items: center;\r\n//   background-image: url('/images/logo.png');\r\n//   background-repeat: no-repeat;\r\n//   background-position: 45% ;\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   flex-direction: column;\r\n//   height: 370px;\r\n//   width: 100%;\r\n//   text-align: center;\r\n//   background-size: 100%;\r\n//   margin-bottom: -30px;\r\n//\r\n//   }\r\n// `\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 48px;\r\n  \r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n    \r\n  }\r\n\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n  <div>\r\n    \r\n      \r\n      <BG>\r\n      <Page>\r\n      <Donate>\r\n      <TEXT>Total meals served <br/><TEXT2>5,018 meals</TEXT2>  Access to Education \r\n<br/><TEXT2>54 students</TEXT2></TEXT>\r\n        </Donate>\r\n        <Banner>\r\n        {/* <div style={{ textAlign: \"center\" }}>\r\n          <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"black\">\r\n            Being Audited by NtHack\r\n          </Heading>\r\n        </div> */}\r\n        </Banner>\r\n        {/* <div style={{ textAlign: \"center\" }}>\r\n          <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"black\">\r\n            Being Audited by NtHack\r\n          </Heading>\r\n        </div> */}\r\n        <div>\r\n\r\n          <Cards>\r\n            \r\n            <FarmStakingCard />\r\n            <TwitterCard />\r\n            <CakeStats />\r\n            <TotalValueLockedCard />\r\n            <RefferalCard />\r\n            <RefferalLink />\r\n\r\n          </Cards>\r\n        </div>\r\n\r\n      </Page>\r\n      <Banner00 alt=\".\" width=\"300\" height=\"300\" src=\"/images/banner00.png \"/>\r\n      <Foot>\r\n          {/* <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n            {TranslateString(576, 'Goose Finance')}\r\n          </Heading> /}\r\n          {/ <Text>{TranslateString(578, 'Top 3 best DEFI app on Binance Smart Chain.')}</Text> */}\r\n        </Foot>\r\n      </BG>\r\n      </div>\r\n    \r\n    \r\n  )\r\n}\r\n\r\n\r\nexport default Home\r\n"],"sourceRoot":""}